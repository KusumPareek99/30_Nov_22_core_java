
public class Employee {
	private int id;
	private String name;
	private double basicSalary;
	private double hra;
	private double da;
	private final double FIXED_ALLOWANCE = 2000;
	private  int idGenrator = 0;
	
	public Employee() {
		id = ++idGenrator;
	}

	public Employee( String name, double basicSalary) {
		this.id = ++idGenrator;;
		this.name = name;
		this.basicSalary = basicSalary;
		this.hra = hra;
		this.da = da;
	}
	
	
	//getter and setter
	
	//display
	
	//calculateNetSalary
	
	//method which return no of employees
	

}

/*
 id,name,salary, 
 id  will be autogenerated
 hra = 12 % of salary
 da = 20% of salary
 fixedAllowance = 2000
 
*/


Assignment no 2:
create an array with random number  10 30 40 50 60

public static int findSecondHighestNumber(int[] arr){
	//logic (don't sort the array)
}

int[]  barr = {0,0,1,1,1,1,2,2,2,0,0,1,0,2,1,2,1,2,0,0};  --array will contain only 3 number i.e 0,1,2
--sort an array
public static void sortArrayHaving3Element(int[] arr){
	//
}


public static boolean isArrayHavingPalidormeElement(int[] arr){
	//0 1 1 0 true
	//1 1 1 1 true
	//1 0 1  true
	//1 2 3 3 2 1 true
	// 1 3  4 5  false
}

//enum
coffesize:

SMALL(100,20)
MEDIUM(200,30)
LARGE(300,40)

--constructor
--method when you pass quantity it return the coffeesize(enum).










Solution:

package com.easylearning.main;

public class ArrayAssignment {

	public static void main(String[] args) {
		int[] barr = { 0, 0, 1, 1, 1, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 0, 0 };
		int[] arr = { 1, 1, 0, 0, 1, 2 };

		sortArrayHaving3Element(barr);
		sortArrayHaving3Element(arr);

		display(arr);
		display(barr);
		
		System.out.println(secondHighest(new int[] {1,2,3,1,2,3,4,3,44,4}));
		System.out.println(secondHighest(new int[] {1,2,30,1,2,3,4,3,44,4}));

	}

	public static void display(int[] arr) {
		for (int a : arr) {
			System.out.print(a + " ");
		}
		System.out.println();
	}

	public static boolean isPalindrome(int []arr) {
		boolean flag=true;
		
		for(int i=0; i<=arr.length/2;i++) {
			if(arr[i] != arr[arr.length-i-1]) {
				flag=false;
				break;
			}
		}
		
		return flag;
	}
	
	public static int secondHighest(int[] arr) {
		int largest = arr[0];
		int secondLargest = arr[0];

		for (int i = 0; i < arr.length; i++) {

			if (arr[i] > largest) {
				secondLargest = largest;
				largest = arr[i];

			} else if (arr[i] > secondLargest) {
				secondLargest = arr[i];
			}
		}

		return secondLargest;
	}

	public static void sortArrayHaving3Element(int[] arr) {
		int zeroCount = 0;
		int oneCount = 0;

		for (int a : arr) {
			if (a == 0) {
				zeroCount++;
			} else if (a == 1) {
				oneCount++;
			}
		}

		for (int i = 0; i < zeroCount; i++) {
			arr[i] = 0;
		}

		for (int i = zeroCount; i < zeroCount + oneCount; i++) {
			arr[i] = 1;
		}

		for (int i = zeroCount + oneCount; i < arr.length; i++) {
			arr[i] = 2;
		}

	}

}


